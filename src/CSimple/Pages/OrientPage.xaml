<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:viewmodels="clr-namespace:CSimple.ViewModels"
             xmlns:models="clr-namespace:CSimple.Models"
             xmlns:local="clr-namespace:CSimple.Pages"
             xmlns:converters="clr-namespace:CSimple.Converters"
             x:DataType="viewmodels:OrientPageViewModel"
             x:Class="CSimple.Pages.OrientPage"
             Title="Orient - Pipeline Editor">
    <ContentPage.Resources>
        <converters:IsNotNullConverter x:Key="IsNotNullConverter" />
        <converters:InverseBoolConverter x:Key="InverseBoolConverter" />
        <converters:EqualsConverter x:Key="EqualsConverter" />
        <converters:HasMultipleInputsConverter x:Key="HasMultipleInputsConverter" />
        <converters:ShowEnsembleMethodConverter x:Key="ShowEnsembleMethodConverter" />
        <converters:IsNotZeroConverter x:Key="IsNotZeroConverter" />
        <converters:ShowStepContentConverter x:Key="ShowStepContentConverter" />
        <converters:StepContentTypeConverter x:Key="StepContentTypeConverter" />
        <converters:MultiImageConverter x:Key="MultiImageConverter" />
        <converters:IsMultiImageConverter x:Key="IsMultiImageConverter" />
        <converters:SafeImageSourceConverter x:Key="SafeImageSourceConverter" />
        <converters:ExecutionStatusVisibilityConverter x:Key="ExecutionStatusVisibilityConverter" />
        <converters:ExecutionStatusColorConverter x:Key="ExecutionStatusColorConverter" />
        <converters:IntToProgressConverter x:Key="IntToProgressConverter" />
        <converters:ModelTypeExecutionColorConverter x:Key="ModelTypeExecutionColorConverter" />
        <!-- ... existing resources ... -->
        <Style x:Key="ThemedPickerStyle"
               TargetType="Picker">
            <!-- Define common picker styles -->
            <Setter Property="BackgroundColor"
                    Value="{AppThemeBinding 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                        Light={StaticResource CardBackgroundLight}, 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                        Dark={StaticResource CardBackgroundDark}}" />
            <Setter Property="TextColor"
                    Value="{AppThemeBinding 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                        Light={StaticResource TextPrimaryLight}, 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                        Dark={StaticResource TextPrimaryDark}}" />
            <Setter Property="TitleColor"
                    Value="{AppThemeBinding 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                        Light={StaticResource TextSecondaryLight}, 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                        Dark={StaticResource TextSecondaryDark}}" />
            <Setter Property="HeightRequest"
                    Value="55" />
            <Setter Property="FontSize"
                    Value="14" />
            <Setter Property="Margin"
                    Value="2" />
            <Setter Property="MinimumWidthRequest"
                    Value="150" />
        </Style>
        <Style x:Key="SmallLabelStyle"
               TargetType="Label">
            <Setter Property="FontSize"
                    Value="10" />
            <Setter Property="TextColor"
                    Value="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
            <Setter Property="Margin"
                    Value="0,5,0,0" />
        </Style>
        <Style x:Key="ToolbarButtonStyle"
               TargetType="Button">
            <Setter Property="CornerRadius"
                    Value="5" />
            <Setter Property="Padding"
                    Value="8,4" />
            <Setter Property="Margin"
                    Value="2" />
            <Setter Property="FontSize"
                    Value="12" />
            <Setter Property="HeightRequest"
                    Value="30" />
            <Setter Property="TextColor"
                    Value="{AppThemeBinding 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                        Light={StaticResource TextOnPrimary}, 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                        Dark={StaticResource TextOnPrimary}}" />
        </Style>
        <Style x:Key="ToolbarLabelStyle"
               TargetType="Label">
            <Setter Property="VerticalOptions"
                    Value="Center" />
            <Setter Property="FontAttributes"
                    Value="Bold" />
            <Setter Property="Margin"
                    Value="5,0" />
            <Setter Property="TextColor"
                    Value="{AppThemeBinding 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                        Light={StaticResource TextPrimaryLight}, 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                        Dark={StaticResource TextPrimaryDark}}" />
        </Style>
    </ContentPage.Resources>
    <Grid RowDefinitions="Auto, *">
        <!-- Top Toolbar (Row 0) -->
        <Border Grid.Row="0"
                StrokeThickness="0"
                BackgroundColor="{AppThemeBinding 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                    Light={StaticResource SurfaceBackgroundLight},
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                    Dark={StaticResource SurfaceBackgroundDark}}"
                Padding="5,5"
                Margin="5,5,5,0"
                VerticalOptions="Start"
                HorizontalOptions="FillAndExpand"
                StrokeShape="RoundRectangle 8">
            <!-- Use FlexLayout for wrapping -->
            <FlexLayout Wrap="Wrap"
                        AlignItems="Center"
                        JustifyContent="Start">
                <!-- Pipeline Management -->
                <Label Text="Pipeline:"
                       Style="{StaticResource ToolbarLabelStyle}" />
                <Picker Title="Select Pipeline"
                        ItemsSource="{Binding AvailablePipelineNames}"
                        SelectedItem="{Binding SelectedPipelineName, Mode=TwoWay}"
                        Style="{StaticResource ThemedPickerStyle}" />
                <Button Command="{Binding CreateNewPipelineCommand}"
                        Text="New"
                        BackgroundColor="{StaticResource Tertiary}"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Create New Pipeline" />
                <Button Command="{Binding RenamePipelineCommand}"
                        Text="Rename"
                        IsEnabled="{Binding SelectedPipelineName, Converter={StaticResource IsNotNullConverter}}"
                        BackgroundColor="{StaticResource Secondary}"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Rename Selected Pipeline" />
                <Button Command="{Binding DeletePipelineCommand}"
                        Text="Delete Pipeline"
                        IsEnabled="{Binding SelectedPipelineName, Converter={StaticResource IsNotNullConverter}}"
                        BackgroundColor="{StaticResource Error}"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Delete Selected Pipeline" />
                <!-- Separator - Force wrap here -->
                <BoxView BackgroundColor="{AppThemeBinding 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                             Light={StaticResource BorderColor},
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                             Dark={StaticResource NeutralDark}}"
                         WidthRequest="1"
                         HeightRequest="25"
                         Margin="10,0"
                         VerticalOptions="Center" />
                <!-- Line break after separator -->
                <BoxView WidthRequest="0"
                         HeightRequest="0"
                         FlexLayout.Basis="100%" />
                <!-- Add Model -->
                <Label Text="Add Node:"
                       Style="{StaticResource ToolbarLabelStyle}" />
                <Picker Title="Select Node Type"
                        ItemsSource="{Binding AvailableModels}"
                        ItemDisplayBinding="{Binding Name}"
                        x:Name="ModelPicker"
                        Style="{StaticResource ThemedPickerStyle}" />
                <Button Command="{Binding AddModelNodeCommand}"
                        CommandParameter="{Binding Source={x:Reference ModelPicker}, Path=SelectedItem}"
                        BackgroundColor="{StaticResource Primary}"
                        Text="Add Node"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Add Selected Model Node" />
                <!-- Delete Node -->
                <Button Command="{Binding DeleteSelectedNodeCommand}"
                        BackgroundColor="{StaticResource Error}"
                        Text="Delete Node"
                        IsEnabled="{Binding SelectedNode, Converter={StaticResource IsNotNullConverter}}"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Delete Selected Node" />
                <!-- Separator -->
                <BoxView BackgroundColor="{AppThemeBinding 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                             Light={StaticResource BorderColor},
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                             Dark={StaticResource NeutralDark}}"
                         WidthRequest="1"
                         HeightRequest="25"
                         Margin="10,0"
                         VerticalOptions="Center" />
                <!-- Line break after separator -->
                <BoxView WidthRequest="0"
                         HeightRequest="0"
                         FlexLayout.Basis="100%" />
                <!-- Review Action Section -->
                <Label Text="Review Action:"
                       Style="{StaticResource ToolbarLabelStyle}" />
                <Picker Title="Select Action"
                        ItemsSource="{Binding AvailableActionNames}"
                        SelectedItem="{Binding SelectedReviewActionName, Mode=TwoWay}"
                        Style="{StaticResource ThemedPickerStyle}"
                        x:Name="ActionReviewPicker" />
                <Button Command="{Binding StepBackwardCommand}"
                        Text="Step Back"
                        IsEnabled="{Binding SelectedReviewActionName, Converter={StaticResource IsNotNullConverter}}"
                        BackgroundColor="{StaticResource Secondary}"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Revert last executed step" />
                <Label Text="{Binding CurrentActionStep, StringFormat='Step: {0}'}"
                       Style="{StaticResource ToolbarLabelStyle}"
                       HorizontalOptions="Center"
                       WidthRequest="60" />
                <Button Command="{Binding StepForwardCommand}"
                        Text="Step Forward"
                        IsEnabled="{Binding SelectedReviewActionName, Converter={StaticResource IsNotNullConverter}}"
                        BackgroundColor="{StaticResource Primary}"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Execute next step of selected action" />
                <Button Command="{Binding ResetActionCommand}"
                        Text="Reset Action"
                        IsEnabled="{Binding SelectedReviewActionName, Converter={StaticResource IsNotNullConverter}}"
                        BackgroundColor="{AppThemeBinding Light={StaticResource WarningLight}, Dark={StaticResource WarningDark}}"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Reset action review to start" />
                <Button Command="{Binding RunAllModelsCommand}"
                        Text="Run All Models"
                        BackgroundColor="{StaticResource Success}"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Execute all models in the pipeline" />
                <Button Command="{Binding RunAllNodesCommand}"
                        Text="Run All Nodes"
                        BackgroundColor="{StaticResource Info}"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Execute all nodes on all action steps with output analysis" />
                <Button Command="{Binding SleepMemoryCompressionCommand}"
                        Text="Sleep"
                        BackgroundColor="{StaticResource Info}"
                        Style="{StaticResource ToolbarButtonStyle}"
                        ToolTipProperties.Text="Put the system to sleep to compress memory." />
            </FlexLayout>
        </Border>
        <!-- GraphicsView for drawing nodes and connections (Row 1) -->
        <GraphicsView Grid.Row="1"
                      x:Name="NodeCanvas"
                      Drawable="{Binding Source={RelativeSource AncestorType={x:Type local:OrientPage}}, Path=NodeDrawable}"
                      StartInteraction="OnCanvasStartInteraction"
                      DragInteraction="OnCanvasDragInteraction"
                      EndInteraction="OnCanvasEndInteraction"
                      CancelInteraction="OnCanvasCancelInteraction"
                      BackgroundColor="{AppThemeBinding 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                          Light={StaticResource BackgroundLight}, 
&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;        &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;                          Dark={StaticResource BackgroundDark}}" />
        <!-- Selected Node Info Panel (Overlay in Row 1) -->
        <Border Grid.Row="1"
                Stroke="{AppThemeBinding Light={StaticResource BorderColor}, Dark={StaticResource NeutralDark}}"
                BackgroundColor="{AppThemeBinding Light={StaticResource CardBackgroundLight}, Dark={StaticResource CardBackgroundDark}}"
                Opacity="0.9"
                Padding="10"
                Margin="10"
                VerticalOptions="End"
                HorizontalOptions="Start"
                StrokeShape="RoundRectangle 8"
                IsVisible="{Binding SelectedNode, Converter={StaticResource IsNotNullConverter}}"
                WidthRequest="{OnPlatform WinUI=400, Default=300}">
            <VerticalStackLayout Spacing="4">
                <!-- Existing Node Info -->
                <Label Text="Selected Node"
                       FontSize="12"
                       FontAttributes="Bold"
                       TextColor="{AppThemeBinding Light={StaticResource TextPrimaryLight}, Dark={StaticResource TextPrimaryDark}}" />
                <Label Text="{Binding SelectedNode.Name}"
                       FontSize="14"
                       LineBreakMode="TailTruncation"
                       TextColor="{AppThemeBinding Light={StaticResource TextPrimaryLight}, Dark={StaticResource TextPrimaryDark}}" />
                <Label Text="{Binding SelectedNode.Type, StringFormat='Type: {0}'}"
                       FontSize="10"
                       TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                <Label Text="{Binding SelectedNode.DataType, StringFormat='Data Type: {0}'}"
                       FontSize="10"
                       TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                <!-- Node Classification Selector (only show for text models) -->
                <StackLayout IsVisible="{Binding SelectedNode.IsTextModel}"
                             Spacing="4"
                             Margin="0,8,0,0">
                    <Label Text="Node Classification:"
                           FontSize="10"
                           FontAttributes="Bold"
                           TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                    <Picker Title="Select classification type"
                            ItemsSource="{Binding TextModelClassifications}"
                            SelectedItem="{Binding SelectedClassification, Mode=TwoWay}"
                            Style="{StaticResource ThemedPickerStyle}"
                            FontSize="12" />
                    <Label Text="Classify this model node as Default (none), Goal, Plan, or Action type"
                           FontSize="9"
                           FontAttributes="Italic"
                           TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                </StackLayout>
                <!-- Ensemble Method Selector (only show for ensemble model nodes with multiple inputs) -->
                <StackLayout IsVisible="{Binding SelectedNode, Converter={StaticResource ShowEnsembleMethodConverter}}"
                             Spacing="4"
                             Margin="0,8,0,0">
                    <Label Text="Ensemble Method:"
                           Style="{StaticResource SmallLabelStyle}" />
                    <Picker Title="Select Ensemble Method"
                            ItemsSource="{Binding SelectedNode.AvailableEnsembleMethods}"
                            SelectedItem="{Binding SelectedNode.SelectedEnsembleMethod, Mode=TwoWay}"
                            FontSize="12"
                            BackgroundColor="{AppThemeBinding Light={StaticResource CardBackgroundLight}, Dark={StaticResource CardBackgroundDark}}"
                            TextColor="{AppThemeBinding Light={StaticResource TextPrimaryLight}, Dark={StaticResource TextPrimaryDark}}"
                            TitleColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                    <Label Text="{Binding SelectedNode.EnsembleInputCount, StringFormat='Inputs: {0}'}"
                           FontSize="10"
                           TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                </StackLayout>
                <!-- New Step-Specific Content Area -->
                <StackLayout>
                    <StackLayout.IsVisible>
                        <MultiBinding Converter="{StaticResource ShowStepContentConverter}">
                            <Binding Path="CurrentActionStep" />
                            <Binding Path="SelectedNode" />
                        </MultiBinding>
                    </StackLayout.IsVisible>
                    <Label Text="Step Content:"
                           Style="{StaticResource SmallLabelStyle}" />
                    <!-- Display Text -->
                    <Label Text="{Binding StepContent, FallbackValue='No text content available'}"
                           FontSize="12"
                           TextColor="{AppThemeBinding Light={StaticResource TextPrimaryLight}, Dark={StaticResource TextPrimaryDark}}">
                        <Label.IsVisible>
                            <MultiBinding Converter="{StaticResource StepContentTypeConverter}"
                                          ConverterParameter="Text">
                                <Binding Path="StepContentType" />
                                <Binding Path="SelectedNode" />
                            </MultiBinding>
                        </Label.IsVisible>
                    </Label>
                    <!-- Display Image(s) - Single or Multiple -->
                    <StackLayout x:Name="ImageDisplayContainer">
                        <StackLayout.IsVisible>
                            <MultiBinding Converter="{StaticResource StepContentTypeConverter}"
                                          ConverterParameter="Image">
                                <Binding Path="StepContentType" />
                                <Binding Path="SelectedNode" />
                            </MultiBinding>
                        </StackLayout.IsVisible>
                        <!-- Single Image (shown when HasMultipleImages is false) -->
                        <Image x:Name="SingleImage"
                               Source="{Binding StepContent, Converter={StaticResource SafeImageSourceConverter}, ConverterParameter='image_placeholder.png'}"
                               Aspect="AspectFit"
                               HeightRequest="150"
                               WidthRequest="150"
                               IsVisible="{Binding HasMultipleImages, Converter={StaticResource InverseBoolConverter}}" />
                        <!-- Multiple Images Container (shown when HasMultipleImages is true) -->
                        <ScrollView x:Name="MultiImageScrollView"
                                    Orientation="Horizontal"
                                    HorizontalScrollBarVisibility="Always"
                                    IsVisible="{Binding HasMultipleImages}">
                            <StackLayout x:Name="MultiImageContainer"
                                         Orientation="Horizontal"
                                         Spacing="10"
                                         BindableLayout.ItemsSource="{Binding StepContentImages}">
                                <BindableLayout.ItemTemplate>
                                    <DataTemplate>
                                        <Image Source="{Binding ., Converter={StaticResource SafeImageSourceConverter}}"
                                               Aspect="AspectFit"
                                               HeightRequest="150"
                                               WidthRequest="150"
                                               Margin="5" />
                                    </DataTemplate>
                                </BindableLayout.ItemTemplate>
                            </StackLayout>
                        </ScrollView>
                    </StackLayout>
                    <!-- Display Audio -->
                    <StackLayout Orientation="Horizontal">
                        <StackLayout.IsVisible>
                            <MultiBinding Converter="{StaticResource StepContentTypeConverter}"
                                          ConverterParameter="Audio">
                                <Binding Path="StepContentType" />
                                <Binding Path="SelectedNode" />
                            </MultiBinding>
                        </StackLayout.IsVisible>
                        <Button Text="Play"
                                Command="{Binding PlayAudioCommand}" />
                        <Button Text="Stop"
                                Command="{Binding StopAudioCommand}" />
                    </StackLayout>
                    <!-- Generate Button for Model Nodes -->
                    <StackLayout IsVisible="{Binding SelectedNode.IsModel}"
                                 Spacing="4"
                                 Margin="0,8,0,0">
                        <Button Text="Generate (Single run)"
                                Command="{Binding GenerateCommand}"
                                BackgroundColor="{StaticResource Primary}"
                                TextColor="{AppThemeBinding Light={StaticResource TextOnPrimary}, Dark={StaticResource TextOnPrimary}}"
                                FontSize="12"
                                CornerRadius="5"
                                Padding="8,4"
                                Margin="0,4,0,0" />
                    </StackLayout>
                    <!-- File Selector for File Nodes -->
                    <StackLayout IsVisible="{Binding SelectedNode.IsFileNode}"
                                 Spacing="4"
                                 Margin="0,8,0,0">
                        <Label Text="Save File Path:"
                               FontSize="10"
                               FontAttributes="Bold"
                               TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                        <Button Text="Choose File..."
                                Command="{Binding SelectSaveFileCommand}"
                                BackgroundColor="{StaticResource Secondary}"
                                TextColor="{AppThemeBinding Light={StaticResource TextOnSecondary}, Dark={StaticResource TextOnSecondary}}"
                                FontSize="12"
                                CornerRadius="5"
                                Padding="8,4"
                                Margin="0,4,0,0" />
                        <Label Text="{Binding SelectedNode.SaveFileDisplayPath}"
                               FontSize="10"
                               LineBreakMode="TailTruncation"
                               TextColor="{AppThemeBinding Light={StaticResource TextPrimaryLight}, Dark={StaticResource TextPrimaryDark}}"
                               Margin="0,2,0,0" />
                        <Label Text="Text node outputs routed to this file node will append to the selected file"
                               FontSize="9"
                               FontAttributes="Italic"
                               TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}"
                               LineBreakMode="WordWrap" />
                    </StackLayout>
                </StackLayout>
            </VerticalStackLayout>
        </Border>
        <!-- Model Execution Status Panel (Always Visible Overlay in Row 1) -->
        <Border Grid.Row="1"
                Stroke="{AppThemeBinding Light={StaticResource BorderColor}, Dark={StaticResource NeutralDark}}"
                BackgroundColor="{AppThemeBinding Light={StaticResource CardBackgroundLight}, Dark={StaticResource CardBackgroundDark}}"
                Opacity="0.95"
                Padding="12"
                Margin="10"
                VerticalOptions="Start"
                HorizontalOptions="End"
                StrokeShape="RoundRectangle 8"
                WidthRequest="280">
            <VerticalStackLayout Spacing="8">
                <!-- Header -->
                <Label Text="Model Execution Status"
                       FontSize="14"
                       FontAttributes="Bold"
                       TextColor="{AppThemeBinding Light={StaticResource TextPrimaryLight}, Dark={StaticResource TextPrimaryDark}}" />
                <!-- Current Status -->
                <Label Text="{Binding ExecutionStatus}"
                       FontSize="12"
                       FontAttributes="Italic"
                       TextColor="{Binding ExecutionStatus, Converter={StaticResource ExecutionStatusColorConverter}}" />
                <!-- Current Model (when executing) -->
                <StackLayout IsVisible="{Binding IsExecutingModels}"
                             Spacing="4">
                    <Label Text="Current Model:"
                           FontSize="10"
                           TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                    <Label Text="{Binding CurrentExecutingModel}"
                           FontSize="11"
                           FontAttributes="Bold"
                           TextColor="{AppThemeBinding Light={StaticResource TextPrimaryLight}, Dark={StaticResource TextPrimaryDark}}"
                           LineBreakMode="TailTruncation" />
                </StackLayout>
                <!-- Progress Bar (Always Visible) -->
                <StackLayout Spacing="4">
                    <Grid ColumnDefinitions="*, Auto">
                        <Label Grid.Column="0"
                               Text="Progress:"
                               FontSize="10"
                               VerticalOptions="Center"
                               TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                        <Label Grid.Column="1"
                               Text="{Binding ExecutionProgress, StringFormat='{0}%'}"
                               FontSize="10"
                               VerticalOptions="Center"
                               HorizontalOptions="End"
                               TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                    </Grid>
                    <ProgressBar Progress="{Binding ExecutionProgress, Converter={StaticResource IntToProgressConverter}}"
                                 ProgressColor="{StaticResource Primary}"
                                 BackgroundColor="{AppThemeBinding Light={StaticResource NeutralLight}, Dark={StaticResource NeutralDark}}"
                                 HeightRequest="6" />
                </StackLayout>
                <!-- Model Count (Always Visible) -->
                <Grid ColumnDefinitions="*, *">
                    <Label Grid.Column="0"
                           Text="{Binding ModelsExecutedCount, StringFormat='Executed: {0}'}"
                           FontSize="10"
                           TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                    <Label Grid.Column="1"
                           Text="{Binding TotalModelsToExecute, StringFormat='Total: {0}'}"
                           FontSize="10"
                           HorizontalOptions="End"
                           TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                </Grid>
                <!-- Execution Groups (When executing in groups) -->
                <StackLayout IsVisible="{Binding IsExecutingInGroups}">
                    <Label Text="Execution Groups:"
                           FontSize="10"
                           FontAttributes="Bold"
                           TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                    <ScrollView HeightRequest="60"
                                VerticalOptions="Fill">
                        <CollectionView ItemsSource="{Binding ExecutionGroups}"
                                        BackgroundColor="Transparent">
                            <CollectionView.ItemsLayout>
                                <LinearItemsLayout Orientation="Vertical"
                                                   ItemSpacing="2" />
                            </CollectionView.ItemsLayout>
                            <CollectionView.ItemTemplate>
                                <DataTemplate x:DataType="models:ExecutionGroupInfo">
                                    <Grid ColumnDefinitions="Auto, *, Auto">
                                        <Label Grid.Column="0"
                                               Text="{Binding GroupDisplayName}"
                                               FontSize="9"
                                               TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}"
                                               VerticalOptions="Center" />
                                        <Label Grid.Column="1"
                                               Text="{Binding ExecutionDurationDisplay}"
                                               FontSize="9"
                                               FontAttributes="{Binding IsCurrentlyExecuting, Converter={StaticResource BoolToFontAttributesConverter}}"
                                               TextColor="{Binding IsCurrentlyExecuting, Converter={StaticResource BoolToExecutingColorConverter}}"
                                               HorizontalOptions="End"
                                               VerticalOptions="Center" />
                                        <Label Grid.Column="2"
                                               Text="✓"
                                               FontSize="9"
                                               TextColor="Green"
                                               IsVisible="{Binding IsCompleted}"
                                               HorizontalOptions="End"
                                               VerticalOptions="Center" />
                                    </Grid>
                                </DataTemplate>
                            </CollectionView.ItemTemplate>
                        </CollectionView>
                    </ScrollView>
                </StackLayout>
                <!-- Execution Duration -->
                <Label Text="{Binding ExecutionDurationDisplay}"
                       FontSize="11"
                       FontAttributes="Bold"
                       TextColor="{AppThemeBinding Light={StaticResource TextPrimaryLight}, Dark={StaticResource TextPrimaryDark}}" />
                <!-- Recent Results (Always Visible, Scrollable) -->
                <StackLayout>
                    <Label Text="Recent Results:"
                           FontSize="10"
                           FontAttributes="Bold"
                           TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}" />
                    <ScrollView HeightRequest="80"
                                VerticalOptions="Fill">
                        <CollectionView ItemsSource="{Binding ExecutionResults}"
                                        BackgroundColor="Transparent">
                            <CollectionView.EmptyView>
                                <Label Text="No execution results yet"
                                       FontSize="9"
                                       FontAttributes="Italic"
                                       TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}"
                                       HorizontalOptions="Center"
                                       VerticalOptions="Center" />
                            </CollectionView.EmptyView>
                            <CollectionView.ItemTemplate>
                                <DataTemplate>
                                    <Label Text="{Binding .}"
                                           FontSize="9"
                                           TextColor="{AppThemeBinding Light={StaticResource TextSecondaryLight}, Dark={StaticResource TextSecondaryDark}}"
                                           Margin="0,1"
                                           LineBreakMode="TailTruncation" />
                                </DataTemplate>
                            </CollectionView.ItemTemplate>
                        </CollectionView>
                    </ScrollView>
                </StackLayout>
            </VerticalStackLayout>
        </Border>
    </Grid>
</ContentPage>