using System;
using System.Diagnostics;
using System.Drawing;
using System.Text.Json;
using System.Threading.Tasks;
using CSimple.Models;
using System.Collections.Generic;

namespace CSimple.Services
{
    /// <summary>
    /// Service for executing action strings generated by ActionStringGenerationService
    /// </summary>
    public class ActionExecutionService
    {
        private readonly ActionService _actionService;
        private readonly WindowDetectionService _windowDetectionService;

        public ActionExecutionService(FileService fileService = null)
        {
            // Create required services for ActionService
            var dataService = new DataService();
            FileService actualFileService;

            if (fileService != null)
            {
                actualFileService = fileService;
            }
            else
            {
                var appPathService = new AppPathService();
                actualFileService = new FileService(appPathService);
            }

            var appModeService = new CSimple.Services.AppModeService.AppModeService();

            _actionService = new ActionService(dataService, actualFileService, appModeService);
            _windowDetectionService = new WindowDetectionService();
        }

        /// <summary>
        /// Executes a JSON action string
        /// </summary>
        public async Task<bool> ExecuteActionStringAsync(string actionString)
        {
            try
            {
                if (string.IsNullOrEmpty(actionString))
                {
                    Debug.WriteLine("[ActionExecution] Action string is null or empty");
                    return false;
                }

                Debug.WriteLine($"[ActionExecution] Executing action string: {actionString}");

                // Parse the JSON action string
                var actionData = JsonSerializer.Deserialize<ActionData>(actionString);
                if (actionData == null)
                {
                    Debug.WriteLine("[ActionExecution] Failed to parse action string");
                    return false;
                }

                // Convert to ActionGroup and execute
                var actionGroup = await ConvertToActionGroupAsync(actionData);
                if (actionGroup == null)
                {
                    Debug.WriteLine("[ActionExecution] Failed to convert action data to ActionGroup");
                    return false;
                }

                // Execute the action using the existing ActionService
                var success = await _actionService.ToggleSimulateActionGroupAsync(actionGroup);

                Debug.WriteLine($"[ActionExecution] Action execution result: {success}");
                return success;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ActionExecution] Error executing action string: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Converts action data to ActionGroup format for execution
        /// </summary>
        private async Task<ActionGroup> ConvertToActionGroupAsync(ActionData actionData)
        {
            try
            {
                var actionGroup = new ActionGroup
                {
                    Id = Guid.NewGuid(),
                    ActionName = $"Generated_{actionData.ActionType}",
                    Description = $"Auto-generated {actionData.ActionType} action",
                    ActionArray = new List<ActionItem>(),
                    CreatedAt = DateTime.Now
                };

                // Convert based on action type
                switch (actionData.ActionType?.ToLowerInvariant())
                {
                    case "leftclick":
                        actionGroup.ActionArray.AddRange(await CreateClickActionsAsync(actionData, 0x0201, 0x0202));
                        break;

                    case "rightclick":
                        actionGroup.ActionArray.AddRange(await CreateClickActionsAsync(actionData, 0x0204, 0x0205));
                        break;

                    case "doubleclick":
                        actionGroup.ActionArray.AddRange(await CreateDoubleClickActionsAsync(actionData));
                        break;

                    case "mousemove":
                        actionGroup.ActionArray.AddRange(await CreateMouseMoveActionsAsync(actionData));
                        break;

                    case "keypress":
                        actionGroup.ActionArray.AddRange(await CreateKeyPressActionsAsync(actionData));
                        break;

                    case "typetext":
                        actionGroup.ActionArray.AddRange(await CreateTypeTextActionsAsync(actionData));
                        break;

                    case "drag":
                        actionGroup.ActionArray.AddRange(await CreateDragActionsAsync(actionData));
                        break;

                    case "scroll":
                        actionGroup.ActionArray.AddRange(await CreateScrollActionsAsync(actionData));
                        break;

                    default:
                        Debug.WriteLine($"[ActionExecution] Unknown action type: {actionData.ActionType}");
                        return null;
                }

                return actionGroup;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ActionExecution] Error converting to ActionGroup: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Creates mouse click actions
        /// </summary>
        private async Task<List<ActionItem>> CreateClickActionsAsync(ActionData actionData, int downEventType, int upEventType)
        {
            var actions = new List<ActionItem>();

            try
            {
                // Mouse move to position (if coordinates are different from current)
                actions.Add(new ActionItem
                {
                    EventType = 0x0200, // Mouse move
                    Coordinates = new Coordinates { X = actionData.X, Y = actionData.Y },
                    Timestamp = DateTime.Now,
                    Duration = 10
                });

                // Mouse button down
                actions.Add(new ActionItem
                {
                    EventType = downEventType,
                    Coordinates = new Coordinates { X = actionData.X, Y = actionData.Y },
                    Timestamp = DateTime.Now.AddMilliseconds(20),
                    Duration = actionData.Duration
                });

                // Mouse button up
                actions.Add(new ActionItem
                {
                    EventType = upEventType,
                    Coordinates = new Coordinates { X = actionData.X, Y = actionData.Y },
                    Timestamp = DateTime.Now.AddMilliseconds(20 + actionData.Duration),
                    Duration = 10
                });

                Debug.WriteLine($"[ActionExecution] Created click actions at ({actionData.X}, {actionData.Y})");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ActionExecution] Error creating click actions: {ex.Message}");
            }

            return actions;
        }

        /// <summary>
        /// Creates double click actions
        /// </summary>
        private async Task<List<ActionItem>> CreateDoubleClickActionsAsync(ActionData actionData)
        {
            var actions = new List<ActionItem>();

            try
            {
                // First click
                actions.AddRange(await CreateClickActionsAsync(actionData, 0x0201, 0x0202));

                // Small delay between clicks
                await Task.Delay(50);

                // Second click
                var secondClickData = new ActionData
                {
                    ActionType = actionData.ActionType,
                    X = actionData.X,
                    Y = actionData.Y,
                    Duration = actionData.Duration
                };

                var secondClick = await CreateClickActionsAsync(secondClickData, 0x0201, 0x0202);

                // Adjust timestamps for second click
                foreach (var action in secondClick)
                {
                    action.Timestamp = ((DateTime)action.Timestamp).AddMilliseconds(200);
                }

                actions.AddRange(secondClick);

                Debug.WriteLine($"[ActionExecution] Created double click actions at ({actionData.X}, {actionData.Y})");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ActionExecution] Error creating double click actions: {ex.Message}");
            }

            return actions;
        }

        /// <summary>
        /// Creates mouse move actions
        /// </summary>
        private async Task<List<ActionItem>> CreateMouseMoveActionsAsync(ActionData actionData)
        {
            var actions = new List<ActionItem>
            {
                new ActionItem
                {
                    EventType = 0x0200, // Mouse move
                    Coordinates = new Coordinates { X = actionData.X, Y = actionData.Y },
                    Timestamp = DateTime.Now,
                    Duration = actionData.Duration
                }
            };

            Debug.WriteLine($"[ActionExecution] Created mouse move action to ({actionData.X}, {actionData.Y})");
            return actions;
        }

        /// <summary>
        /// Creates key press actions
        /// </summary>
        private async Task<List<ActionItem>> CreateKeyPressActionsAsync(ActionData actionData)
        {
            var actions = new List<ActionItem>();

            try
            {
                var keyCode = GetKeyCodeFromString(actionData.KeyCode);

                // Key down
                actions.Add(new ActionItem
                {
                    EventType = 0x0100, // Key down
                    KeyCode = keyCode,
                    Timestamp = DateTime.Now,
                    Duration = actionData.Duration
                });

                // Key up
                actions.Add(new ActionItem
                {
                    EventType = 0x0101, // Key up
                    KeyCode = keyCode,
                    Timestamp = DateTime.Now.AddMilliseconds(actionData.Duration),
                    Duration = 10
                });

                Debug.WriteLine($"[ActionExecution] Created key press actions for key: {actionData.KeyCode}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ActionExecution] Error creating key press actions: {ex.Message}");
            }

            return actions;
        }

        /// <summary>
        /// Creates type text actions
        /// </summary>
        private async Task<List<ActionItem>> CreateTypeTextActionsAsync(ActionData actionData)
        {
            var actions = new List<ActionItem>();

            try
            {
                if (string.IsNullOrEmpty(actionData.Text))
                    return actions;

                var timestamp = DateTime.Now;
                foreach (char c in actionData.Text)
                {
                    var keyCode = GetKeyCodeFromChar(c);

                    // Key down
                    actions.Add(new ActionItem
                    {
                        EventType = 0x0100,
                        KeyCode = keyCode,
                        Timestamp = timestamp,
                        Duration = 50
                    });

                    // Key up
                    actions.Add(new ActionItem
                    {
                        EventType = 0x0101,
                        KeyCode = keyCode,
                        Timestamp = timestamp.AddMilliseconds(50),
                        Duration = 10
                    });

                    timestamp = timestamp.AddMilliseconds(100);
                }

                Debug.WriteLine($"[ActionExecution] Created type text actions for: {actionData.Text}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ActionExecution] Error creating type text actions: {ex.Message}");
            }

            return actions;
        }

        /// <summary>
        /// Creates drag actions
        /// </summary>
        private async Task<List<ActionItem>> CreateDragActionsAsync(ActionData actionData)
        {
            var actions = new List<ActionItem>();

            try
            {
                // Move to start position
                actions.Add(new ActionItem
                {
                    EventType = 0x0200,
                    Coordinates = new Coordinates { X = actionData.X, Y = actionData.Y },
                    Timestamp = DateTime.Now,
                    Duration = 10
                });

                // Mouse down
                actions.Add(new ActionItem
                {
                    EventType = 0x0201,
                    Coordinates = new Coordinates { X = actionData.X, Y = actionData.Y },
                    Timestamp = DateTime.Now.AddMilliseconds(20),
                    Duration = 50
                });

                // Drag to end position
                actions.Add(new ActionItem
                {
                    EventType = 0x0200,
                    Coordinates = new Coordinates { X = actionData.EndX, Y = actionData.EndY },
                    Timestamp = DateTime.Now.AddMilliseconds(100),
                    Duration = 200
                });

                // Mouse up
                actions.Add(new ActionItem
                {
                    EventType = 0x0202,
                    Coordinates = new Coordinates { X = actionData.EndX, Y = actionData.EndY },
                    Timestamp = DateTime.Now.AddMilliseconds(320),
                    Duration = 10
                });

                Debug.WriteLine($"[ActionExecution] Created drag actions from ({actionData.X}, {actionData.Y}) to ({actionData.EndX}, {actionData.EndY})");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ActionExecution] Error creating drag actions: {ex.Message}");
            }

            return actions;
        }

        /// <summary>
        /// Creates scroll actions
        /// </summary>
        private async Task<List<ActionItem>> CreateScrollActionsAsync(ActionData actionData)
        {
            var actions = new List<ActionItem>();

            try
            {
                // Move to scroll position
                actions.Add(new ActionItem
                {
                    EventType = 0x0200,
                    Coordinates = new Coordinates { X = actionData.X, Y = actionData.Y },
                    Timestamp = DateTime.Now,
                    Duration = 10
                });

                // Scroll wheel event
                var scrollDirection = actionData.ScrollDirection?.ToLowerInvariant() == "down" ? -120 : 120;
                actions.Add(new ActionItem
                {
                    EventType = 0x020A, // Mouse wheel
                    Coordinates = new Coordinates { X = actionData.X, Y = actionData.Y },
                    MouseData = (uint)scrollDirection,
                    Timestamp = DateTime.Now.AddMilliseconds(20),
                    Duration = 10
                });

                Debug.WriteLine($"[ActionExecution] Created scroll actions at ({actionData.X}, {actionData.Y}) direction: {actionData.ScrollDirection}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ActionExecution] Error creating scroll actions: {ex.Message}");
            }

            return actions;
        }

        /// <summary>
        /// Converts key string to key code
        /// </summary>
        private int GetKeyCodeFromString(string keyString)
        {
            var keyMappings = new Dictionary<string, int>
            {
                { "Return", 13 }, { "Enter", 13 },
                { "Space", 32 }, { "Tab", 9 },
                { "Escape", 27 }, { "BackSpace", 8 },
                { "Delete", 46 }, { "Control", 17 },
                { "Alt", 18 }, { "Shift", 16 },
                { "F1", 112 }, { "F2", 113 }, { "F3", 114 }, { "F4", 115 },
                { "F5", 116 }, { "F6", 117 }, { "F7", 118 }, { "F8", 119 },
                { "F9", 120 }, { "F10", 121 }, { "F11", 122 }, { "F12", 123 }
            };

            if (keyMappings.ContainsKey(keyString))
                return keyMappings[keyString];

            // Single character keys
            if (keyString.Length == 1)
                return (int)keyString.ToUpperInvariant()[0];

            return 32; // Default to space
        }

        /// <summary>
        /// Converts character to key code
        /// </summary>
        private int GetKeyCodeFromChar(char c)
        {
            return (int)char.ToUpperInvariant(c);
        }
    }

    /// <summary>
    /// Data structure for parsed action commands
    /// </summary>
    public class ActionData
    {
        public string ActionType { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
        public int EndX { get; set; }
        public int EndY { get; set; }
        public string KeyCode { get; set; }
        public string Text { get; set; }
        public string ScrollDirection { get; set; }
        public int Duration { get; set; } = 100;
        public DateTime Timestamp { get; set; }
    }
}
