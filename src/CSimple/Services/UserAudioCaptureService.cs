








































































                var deviceInfo = WaveIn.GetCapabilities(i);            {            for (int i = 0; i < WaveIn.DeviceCount; i++)        {        private int FindWebcamAudioDevice()        }            }                debugOutput("Stopped recording webcam audio.");                _waveIn?.StopRecording();            {            else            }                }                    debugOutput($"Error: {ex.Message}");                {                catch (Exception ex)                }                    debugOutput("Recording webcam audio...");                    _waveIn.StartRecording();                    };                        // ExtractMFCCs(filePath);                        // AddFileToLastItem(filePath);                        debugOutput($"Recording saved to: {filePath}");                        _waveIn.Dispose();                        _writer = null;                        _writer?.Dispose();                    {                    _waveIn.RecordingStopped += (s, a) =>                    };                        _writer.Write(a.Buffer, 0, a.BytesRecorded);                    {                    _waveIn.DataAvailable += (s, a) =>                    _writer = new WaveFileWriter(filePath, _waveIn.WaveFormat);                    _waveIn.WaveFormat = new WaveFormat(44100, 1);                    _waveIn.DeviceNumber = deviceNumber;                    }                        return;                        debugOutput("Webcam audio device not found.");                    {                    if (deviceNumber == -1)                    var deviceNumber = FindWebcamAudioDevice();                    _waveIn = new WaveInEvent();                    string filePath = Path.Combine(webcamAudioDirectory, $"WebcamAudio_{DateTime.Now:yyyyMMdd_HHmmss}.wav");                    Directory.CreateDirectory(webcamAudioDirectory);                    string webcamAudioDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "CSimple", "Resources", "WebcamAudio");                {                try            {            if (buttonText == "Stop")            debugOutput($"User Audible Output: {buttonText}");            buttonText = buttonText == "Read" ? "Stop" : "Read";        {        public void ToggleUserAudibleOutput(ref string buttonText, Action<string> debugOutput)        private WaveFileWriter _writer;        private WaveInEvent _waveIn;    {    public class UserAudioCaptureService{namespace CSimple.Servicesusing System.Diagnostics;using NAudio.Wave;