name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DOTNET_VERSION: "8.0.x"
  SOLUTION_PATH: "src/CSimple.sln"
  TEST_PROJECT_PATH: "src/CSimple.Tests"
  MAIN_PROJECT_PATH: "src/CSimple"

jobs:
  test:
    name: Run Tests
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install .NET MAUI Workloads
        run: |
          dotnet workload install maui
          dotnet workload install maui-windows

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: Run unit tests
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} `
            --configuration Release `
            --no-build `
            --logger "trx;LogFileName=test-results.trx" `
            --logger "console;verbosity=detailed" `
            --collect:"XPlat Code Coverage" `
            --results-directory ./test-results

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: "./test-results/*.trx"
          reporter: dotnet-trx

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ./test-results/

      - name: Upload code coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./test-results/**/coverage.cobertura.xml
          fail_ci_if_error: false

  build-windows:
    name: Build Windows MSIX
    runs-on: windows-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install .NET MAUI Workloads
        run: |
          dotnet workload install maui
          dotnet workload install maui-windows

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Publish Windows App
        run: |
          dotnet publish ${{ env.MAIN_PROJECT_PATH }} `
            -f net8.0-windows10.0.19041.0 `
            -c Release `
            -p:RuntimeIdentifierOverride=win10-x64 `
            -p:WindowsPackageType=MSIX `
            -p:WindowsAppSDKSelfContained=true

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-msix
          path: |
            ${{ env.MAIN_PROJECT_PATH }}/bin/Release/net8.0-windows10.0.19041.0/win10-x64/AppPackages/**/*.msix

  copilot-agent-tests:
    name: GitHub Copilot Agent Tests
    runs-on: windows-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install .NET MAUI Workloads
        run: |
          dotnet workload install maui
          dotnet workload install maui-windows

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Run Copilot Agent specific tests
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} `
            --configuration Release `
            --filter "TestCategory=CopilotAgent" `
            --logger "console;verbosity=detailed" `
            --logger "trx;LogFileName=copilot-agent-results.trx" `
            --results-directory ./copilot-test-results

      - name: Run Build Verification Tests
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} `
            --configuration Release `
            --filter "TestCategory=Build" `
            --logger "console;verbosity=detailed"

      - name: Run Integration Tests
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} `
            --configuration Release `
            --filter "TestCategory=Integration" `
            --logger "console;verbosity=detailed"

      - name: Upload Copilot test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: copilot-agent-test-results
          path: ./copilot-test-results/
